
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  messageCount: 'messageCount'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  role: 'role',
  content: 'content',
  audioUrl: 'audioUrl',
  ssmlUsed: 'ssmlUsed',
  timestamp: 'timestamp',
  metrics: 'metrics'
};

exports.Prisma.ApiKeyScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  openai: 'openai',
  elevenlabs: 'elevenlabs',
  gemini: 'gemini',
  anthropic: 'anthropic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VoiceConfigScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  voiceId: 'voiceId',
  model: 'model',
  ssmlEnabled: 'ssmlEnabled',
  ssmlModel: 'ssmlModel',
  prosodyEnabled: 'prosodyEnabled',
  emphasisEnabled: 'emphasisEnabled',
  phonemesEnabled: 'phonemesEnabled',
  formality: 'formality',
  maxBreaksPer100Words: 'maxBreaksPer100Words',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClaudeConfigScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  systemPromptTemplate: 'systemPromptTemplate',
  voiceEnabled: 'voiceEnabled',
  voiceDirectives: 'voiceDirectives',
  model: 'model',
  maxTurns: 'maxTurns',
  permissionMode: 'permissionMode',
  allowedTools: 'allowedTools',
  disallowedTools: 'disallowedTools',
  mcpServers: 'mcpServers',
  customInstructions: 'customInstructions',
  templateVars: 'templateVars',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SettingsScalarFieldEnum = {
  id: 'id',
  inputDeviceId: 'inputDeviceId',
  sampleRate: 'sampleRate',
  noiseSuppressionEnabled: 'noiseSuppressionEnabled',
  vadThreshold: 'vadThreshold',
  minSilenceMs: 'minSilenceMs',
  maxUtteranceMs: 'maxUtteranceMs',
  minSpeechMs: 'minSpeechMs',
  trimLongSilences: 'trimLongSilences',
  maxChunkLengthMs: 'maxChunkLengthMs',
  sttProvider: 'sttProvider',
  sttModel: 'sttModel',
  sttLocale: 'sttLocale',
  sttEncoding: 'sttEncoding',
  sendPartials: 'sendPartials',
  ttsProvider: 'ttsProvider',
  ttsVoiceId: 'ttsVoiceId',
  ttsModel: 'ttsModel',
  ttsStreamPlayback: 'ttsStreamPlayback',
  ttsAutoplay: 'ttsAutoplay',
  ssmlEnabled: 'ssmlEnabled',
  ssmlModel: 'ssmlModel',
  ssmlEnableProsody: 'ssmlEnableProsody',
  ssmlEnableEmphasis: 'ssmlEnableEmphasis',
  ssmlEnablePhonemes: 'ssmlEnablePhonemes',
  ssmlFormality: 'ssmlFormality',
  ssmlMaxBreaksPer100Words: 'ssmlMaxBreaksPer100Words',
  defaultMode: 'defaultMode',
  autoSendInAutoMode: 'autoSendInAutoMode',
  pttKeybinding: 'pttKeybinding',
  keepConversationHistory: 'keepConversationHistory',
  retentionDays: 'retentionDays',
  loggingLevel: 'loggingLevel',
  metricsEnabled: 'metricsEnabled',
  backendUrl: 'backendUrl',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectContextScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  projectPath: 'projectPath',
  projectName: 'projectName',
  claudeMdPath: 'claudeMdPath',
  devCommand: 'devCommand',
  buildCommand: 'buildCommand',
  testCommand: 'testCommand',
  stopCommand: 'stopCommand',
  settings: 'settings',
  createdAt: 'createdAt',
  lastAccessedAt: 'lastAccessedAt'
};

exports.Prisma.TodoScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  projectPath: 'projectPath',
  title: 'title',
  description: 'description',
  status: 'status',
  priority: 'priority',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt',
  archivedAt: 'archivedAt',
  blockedReason: 'blockedReason',
  assignee: 'assignee',
  metadata: 'metadata'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.TodoStatus = exports.$Enums.TodoStatus = {
  BACKLOG: 'BACKLOG',
  IN_PROGRESS: 'IN_PROGRESS',
  BLOCKED: 'BLOCKED',
  COMPLETED: 'COMPLETED',
  ARCHIVED: 'ARCHIVED'
};

exports.Priority = exports.$Enums.Priority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.Prisma.ModelName = {
  Project: 'Project',
  Conversation: 'Conversation',
  Message: 'Message',
  ApiKey: 'ApiKey',
  VoiceConfig: 'VoiceConfig',
  ClaudeConfig: 'ClaudeConfig',
  Settings: 'Settings',
  ProjectContext: 'ProjectContext',
  Todo: 'Todo'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
